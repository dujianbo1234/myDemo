<template>
	<div class='container'>
		<!-- <el-row>
			<el-col>
				<el-card>
					<el-form :inline="true" :model="formCascader"  ref="formCascader" :rules="formCascaderRules" class="demo-form-inline" label-width="110px">
						<el-form-item prop="name">
							<el-input  v-model="formCascader.name" placeholder="请输入任务名称"></el-input>
						</el-form-item>

						<el-form-item>
							<el-button type="primary"  @click="queryDataClick('formCascader')">查询</el-button>
						</el-form-item>
						<el-form-item class="buttonItem">
							<el-button type="warning" icon="el-icon-zoom-out" plain @click="multipleStopTask()">暂停</el-button>
				  			<el-button type="success" icon="el-icon-circle-check-outline" @click="killTaskContinue()" plain>继续</el-button>
							<el-button type="danger"  icon="el-icon-circle-close-outline" @click="deleteRowTask()" plain>删除</el-button>
						</el-form-item>
					</el-form>
				</el-card>
			</el-col>
		</el-row>
		<el-row>
			<el-col>
				<el-card>
					<el-table v-loading="tableLoading" @selection-change="handleSelectionChange" :data="tableData" style="width: 100%" :default-sort="{prop: 'userId', order: 'ascending'}">
						<el-table-column type="selection" width="55">
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="name" label='任务名称' min-width="80" align="center">
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="creator" label='操作人' min-width="80" align="center">
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="level" label='任务级别' min-width="80" align="center" :formatter="formatterLevel">
						</el-table-column>
						
						<el-table-column prop="triCondition" label='触发条件/条' min-width="100" align="center">
							<template slot-scope="scope">
								<el-popover placement="top" width="400" trigger="hover">
									<el-table :data="gridData">
										<el-table-column width="80" property="object" label="选择对象"></el-table-column>
										<el-table-column width="80" property="index" label="选择指标"></el-table-column>
										<el-table-column width="80" property="type" label="选择类型"></el-table-column>
										<el-table-column width="50" property="selectValue" label="值"></el-table-column>
										<el-table-column width="80" property="incidenceRelation" label="关联关系"></el-table-column>
									</el-table>
									<el-tag  slot="reference">{{ scope.row.triCondition }}</el-tag>
								</el-popover>
							</template>
						</el-table-column >
						<el-table-column show-overflow-tooltip prop="insRange" label='巡检范围' min-width="80" align="center">
						</el-table-column>
						<el-table-column prop="" label='巡检指标数' min-width="80" align="center">
							<template slot-scope="scope">
								<el-popover trigger="hover" placement="top">
									<el-table :data="scope.row.inspectionItems">
										<el-table-column show-overflow-tooltip  prop="dataType" label='类型' width="100" align="center">
										</el-table-column>
										<el-table-column show-overflow-tooltip  prop="stringResult" label='输出结果' width="100" align="center">
										</el-table-column>
										<el-table-column show-overflow-tooltip prop="reference" label='基线数据' width="100" align="center">
										</el-table-column>
										<el-table-column show-overflow-tooltip prop="lowerLimit" label='基线下限' width="100" align="center">
										</el-table-column>
										<el-table-column show-overflow-tooltip prop="highLimit" label='基线上限' width="100" align="center"> 
										</el-table-column>
										<el-table-column show-overflow-tooltip prop="alarm" label='是否告警' width="100" align="center" > 
										</el-table-column>
									</el-table>
									<div slot="reference" style="text-align:center" class="name-wrapper">
										{{scope.row.itemCount}}
									</div>
								</el-popover>
							</template>
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="startTime" label='开始时间' min-min-width="130" align="center">
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="endTime" label='结束时间' min-width="130" align="center">
						</el-table-column>
						<el-table-column prop="percent" label='任务进展' width="150" sortable>
							<template slot-scope="scope">
								<el-progress color="#42b983" :text-inside="true" :stroke-width="18" :percentage="Number(scope.row.percent)"></el-progress>
							</template>
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="state" label='状态' min-width="100" align="center" :formatter="formatmodelState">
						</el-table-column>
						<el-table-column prop="result" label='结果详情' min-width="80" align="center">
							<template slot-scope="scope">
								<i class="el-icon-view" style="    font-size: 20px;" @click="resultDetail(scope.row.id)"></i>
							</template>
						</el-table-column>
						<el-table-column prop="operate" label='操作' min-width="300" align="center">
							<template slot-scope="scope">
								<el-button :disabled="scope.row.state.indexOf('0') != -1 || scope.row.state.indexOf('2') != -1 || scope.row.state.indexOf('3') != -1 || scope.row.state.indexOf('4') != -1" size="mini" type="warning" @click="stopTask(scope.row.id)">暂停</el-button>
								<el-button :disabled="scope.row.state.indexOf('1') != -1 || scope.row.state.indexOf('2') != -1 || scope.row.state.indexOf('4') != -1" size="mini" type="success" @click="continueOne(scope.row.id)">继续</el-button>
								<el-button size="mini" type="danger" @click="deleteTask(scope.row.id)">删除</el-button>
							</template>
						</el-table-column>
						
					</el-table>
					<div class="block" align="right">
						<el-pagination v-if="totalCount>0" :current-page="currentPage" :page-sizes="[5, 10, 20, 50, 100, 200, 500]" :page-size="pageSize" :total="totalCount" layout="total, sizes, prev, pager, next, jumper" 
							@size-change="handleSizeChange" @current-change="handleCurrentChange" />
					</div>
				</el-card>
			</el-col>
		</el-row> -->

		<div class="cont">
			<div class="RightRow">
				<el-card>
					<el-form :inline="true" label-position="right" label-width="70px" size="small" :model="formCascader" :rules="formCascaderRules" ref="formCascader">
						<el-form-item label="任务名称" prop="name">
							<el-input  v-model="formCascader.name" placeholder="请输入任务名称" @keyup.enter.native="queryDataClick('formCascader')"></el-input>
						</el-form-item>
						<el-form-item prop="creator" label="操作人">
							<el-input v-model="formCascader.creator" placeholder="请输入操作人" @keyup.enter.native="queryDataClick('formCascader')"></el-input>
						</el-form-item>
							<el-button size="small" class="search_btn" @click="queryDataClick('formCascader')" style="margin-left:10px;">查询</el-button>
							<el-button size="small" class="opt_btn" @click.stop="queryDataRest('formCascader')">重置</el-button>
							<!-- <i class="iconfont step_btn" v-bind:class="[isShowing ? blurClass : '',bkClass]" @click="arrowTest()">&#xe619;</i>
							<el-popover
								placement="top-end"
								title=""
								width="250"
								trigger="click">
								<el-checkbox-group v-model="checkList">
									<el-checkbox label="复选框 A"></el-checkbox>
									<el-checkbox label="复选框 B"></el-checkbox>
									<el-checkbox label="复选框 C"></el-checkbox>
									<el-checkbox label="复选框 A"></el-checkbox>
									<el-checkbox label="复选框 B"></el-checkbox>
									<el-checkbox label="复选框 C"></el-checkbox>
									<el-checkbox label="复选框 A"></el-checkbox>
									<el-checkbox label="复选框 B"></el-checkbox>
									<el-checkbox label="复选框 C"></el-checkbox>
								</el-checkbox-group>
								<i class="iconfont step_btn" slot="reference">&#xe615;</i>
							</el-popover>
							<div ref="schItemShow2" class="schItemShow">
								<el-form-item label="平台类型"  prop="creator"> 
									<el-input v-model="formCascader.creator" placeholder="请选择模板类型" @keyup.enter.native="queryData('queryForm')"></el-input>
								</el-form-item>
							</div> -->
					</el-form>
				</el-card>
			</div>
      		<div class="RightRow">
        		<el-card>
					<div class="buttonItem">
						<el-button size="small" plain class="opt_btn" @click="multipleStopTask()">批量暂停</el-button>
						<el-button size="small" plain class="opt_btn" @click="killTaskContinue()">批量继续</el-button>
						<el-button size="small" plain class="opt_btn del_btn" @click="deleteRowTask()">批量删除</el-button>
					</div>
					<el-table ref="multipleTable" :data="tableData" tooltip-effect="dark" @selection-change="handleSelectionChange" :header-cell-style="headStyle">
						<el-table-column type="selection" width="55">
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="name" label='任务名称' min-width="150" align="left">
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="platformId" label='平台类型' min-width="150" align="left" :formatter="formatPlatformId">
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="creator" label='操作人' min-width="150" align="left">
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="level" label='任务级别' min-width="100" :formatter="formatmodelLevel" >
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="triggerType" label='调度' min-width="80" >
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="startTime" label='开始时间' min-width="150" >
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="endTime" label='结束时间' min-width="150" >
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="plan" label='巡检进度' min-width="100" align="left">
							<template slot-scope="scope">
								<el-progress :text-inside="true" color="#42b983" :stroke-width="18" :percentage="Number(scope.row.percent)"></el-progress>
							</template>
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="state" label='状态' min-width="80"  fixed="right">
							<template slot-scope="scope">
								<el-tooltip v-if="scope.row.state == 0" class="item" effect="dark" content="等待" placement="top-start">
									<i class="iconfont wait_btn" >&#xe673;</i>
								</el-tooltip>
								<el-tooltip v-else-if="scope.row.state == 1" class="item" effect="dark" content="执行中" placement="top-start">
									<i class="iconfont excute_btn" >&#xe671;</i>
								</el-tooltip>
								<el-tooltip v-else-if="scope.row.state == 2" class="item" effect="dark" content="完成" placement="top-start">
									<i class="iconfont accomplish_btn" >&#xe674;</i>
								</el-tooltip>
								<el-tooltip v-else-if="scope.row.state == 3" class="item" effect="dark" content="暂停" placement="top-start">
									<i class="iconfont pause_btn" >&#xe672;</i>
								</el-tooltip>
								<el-tooltip v-else-if="scope.row.state == 4" class="item" effect="dark" content="异常" placement="top-start">
									<i class="iconfont anomaly_btn" >&#xe677;</i>
								</el-tooltip>
							</template>
						</el-table-column>
						<el-table-column show-overflow-tooltip prop="content" label='触发条件' min-width="80"  fixed="right">
							<template slot-scope="scope">
								<i class="iconfont detail_btn">&#xe670;</i>	
							</template>
						</el-table-column>
						<el-table-column prop="nodeInstList" label='结果详情' width="80" fixed="right">
							<template slot-scope="scope">
								<i class="iconfont detail_btn"  @click="resultDetail(scope.row.id)">&#xe67a;</i>	
							</template>
						</el-table-column>
						<el-table-column label="操作" min-width="170" fixed="right">
							<template slot-scope="scope">
								<i class="iconfont table_btn" v-show="!(scope.row.state.indexOf('0') != -1 ||scope.row.state.indexOf('1') != -1 || scope.row.state.indexOf('2') != -1 || scope.row.state.indexOf('4') != -1) "  @click="continueOne(scope.row.id)">&#xe603;</i>
								<i class="iconfont table_btn" v-show="!(scope.row.state.indexOf('0') != -1 || scope.row.state.indexOf('2') != -1 || scope.row.state.indexOf('3') != -1 || scope.row.state.indexOf('4') != -1) "   @click="stopTask(scope.row.id)">&#xe60a;</i>
								<i class="iconfont table_btn"  @click="deleteTask(scope.row.id)">&#xe63b;</i>
							</template>
						</el-table-column>
					</el-table>
					<div class="block" align="right">
						<el-pagination align="right" background @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="currentPage" :page-size="pageSize" :page-sizes="[10,20,50]" layout="total,sizes,prev, pager, next, jumper" :total="totalCount" :pager-count="5">
						</el-pagination>
					</div>
        		</el-card>
      		</div>
    	</div>

		<!-- 详情弹框 -->
		<el-dialog v-loading="tableLoadingDetail" title="结果详情" :visible.sync="resultDetailDialog" width="60%">
			<el-table :data="resultDetailTable">
				<el-table-column show-overflow-tooltip property="taskCount" label="执行次数"></el-table-column>
				<el-table-column show-overflow-tooltip property="state" label="状态" :formatter="formatmodelStateTwo"></el-table-column>
				<el-table-column show-overflow-tooltip property="startTime" label="开始时间" min-width="150"></el-table-column>
				<el-table-column show-overflow-tooltip property="endTime" label="结束时间" min-width="150"></el-table-column>
				<el-table-column label='节点详情' fixed="right" width="150">
					<template slot-scope="scope">
						<el-popover trigger="click" placement="top" title="显示详情" width="1100">
							<el-table :data="scope.row.nodeInfos">
								<el-table-column show-overflow-tooltip prop="name" label='节点名称' min-width="100">
								</el-table-column>
								<el-table-column show-overflow-tooltip prop="step" label='步骤' min-width="100">
								</el-table-column>
								<el-table-column show-overflow-tooltip prop="state" label='状态' min-width="100" :formatter="formatmodelPopoverState">
								</el-table-column>
								<el-table-column show-overflow-tooltip prop="startTime" label='开始时间' min-width="100">
								</el-table-column>
								<el-table-column show-overflow-tooltip prop="endTime" label='结束时间' min-width="100">
								</el-table-column>
								<el-table-column prop="resolveResult" label='执行结果' min-width="100">
									<template slot-scope="scope">
										<el-popover trigger="hover" v-if="scope.row.resolveResult" placement="top-start" width="500">
											<el-card style="overflow:scroll" v-for="(item,index) in JSON.parse(scope.row.resolveResult)" :key="index">
												<pre><span style="color:red">主机:</span>{{item.host}}</pre>
												<pre><span style="color:red">结果:</span>{{item.msg}}</pre>
												<pre><span style="color:red">状态:</span>{{item.state}}</pre>
												<br/>
											</el-card>
											<div slot="reference" class="name-wrapper" >
												<i class="el-icon-view"  :percentage="scope.row.executeResult"></i>
											</div>
										</el-popover>
										<el-tag v-else type="info">无数据</el-tag>
									</template>
								</el-table-column>
								<el-table-column prop="resolveResult" label='解析结果' min-width="100">
									<template slot-scope="scope">
										<el-popover trigger="hover" v-if="scope.row.resolveResult" placement="top-start" width="500">
											<el-card style="overflow:scroll" v-for="(item,index) in JSON.parse(scope.row.resolveResult)" :key="index">
												<pre><span style="color:red">主机:</span>{{item.ip}}</pre>
												<pre><span style="color:red">结果:</span>{{item.result}}</pre>
												<!-- <pre><span style="color:red">状态:</span>{{item.exceptionCount}}</pre> -->
												<br/>
											</el-card>
											<div slot="reference" class="name-wrapper" >
												<i class="el-icon-view"  :percentage="scope.row.executeResult"></i>
											</div>
										</el-popover>
										<el-tag v-else type="info">无数据</el-tag>
									</template>
								</el-table-column>
							</el-table>
							<div slot="reference" class="name-wrapper">
								<el-tag size="medium">显示详情</el-tag>
							</div>
						</el-popover>
					</template>
				</el-table-column>
			</el-table>
		</el-dialog>
		

	</div>
</template>


<script>
	import * as service from '@/modules/ops/api/ops/autoInspection/insExecuteManage.js'
	import * as rule from '@/modules/ops/api/rules.js'
	import { getToken } from '@/utils/auth'
	import Cookies from 'js-cookie'
	export default {
		data() {
			return {
				pageSize: 10, // 每页多少条
				totalSize: 1000, // 总条数	
				currentPage: 1, // 当前页
				totalCount: 1, // 总条数
				// ----------------------------------------------
				checkList:[],
				// 表头样式
				headStyle: {
					'background-color': '#F4F8F9',
					'color': 'rgba(0,0,0,0.60)',
				},
				// 图标样式
				isShowing: false,
				bkClass: 'bk',
				blurClass: 'blur',
				// 控制表格加载
				tableLoading:true,
				// 控制详情表格加载
				tableLoadingDetail: true,
				// 结果详情弹框
				resultDetailDialog: false,
				// 查询的表单
				formCascader:{
					creator:'',
					name:'',
				},
				// 首页搜索的验证规则
				formCascaderRules: {
					name:[ 
						{ validator: rule.validateQueryName, trigger: 'blur' },
					],
				},
				// 表格选中的行
				multipleSelection: [],
				resultDetailTable:[],
				textarea3: '',
				tableData: [],



				websock: null,

				// 定时器
				timer:1,
			};
		},
		created(){
           //页面刚进入时开启长连接
            // this.initWebSocket()
		   },
		beforeDestroy() {
			this.timer = -1
		},
	   	destroyed: function() {
　　　　 //页面销毁时关闭长连接
　　　　　　 this.websocketclose();
　　　　 },
		mounted() {
			this.queryData()
			this.timerFn()
		},
		methods: {
			//  ------------------------------------------------
			// axios轮循
			timerFn(){
				var _self = this
				_self.timer++
				if(_self.timer>0){
					setTimeout(function(){
						_self.queryData()
						_self.timerFn()
					},5000)
				}
			},
			//点击鼠标显示
			arrowTest() {
				this.isShowing = !this.isShowing;

				if(this.$refs.schItemShow2.style.display == 'block') {
					this.$refs.schItemShow2.style.display = 'none';
				} else {
					this.$refs.schItemShow2.style.display = 'block';
				}
			},
			// websocket
			initWebSocket(){ //初始化weosocket
				console.log('初始化weosocket')
				var wsuri= ''
				if(process.env.NODE_ENV == "development"){
					wsuri = 'ws://192.168.137.1:8082/ops/api/v1/websocket/'+ Cookies.get('userId') +'';        
				}else {
					wsuri  = process.env.BASE_WS +'ops/api/v1/websocket/'+ Cookies.get('userId') +'';        
				}
				console.log(Cookies.get('userId'))
				// wsuri = 'ws://192.168.137.1:8082/ops/api/v1/websocket/'+ Cookies.get('userId') +'';        
				this.websock = new WebSocket(wsuri);        
				this.websock.onmessage = this.websocketonmessage;        
				this.websock.onopen = this.websocketonopen;        
				this.websock.onerror = this.websocketonerror;        
				this.websock.onclose = this.websocketclose;
			},
			websocketonopen(){ //连接建立之后执行send方法发送数据
				console.log("WebSocket连接成功");
				let actions = {"test":"WebSocket连接成功"};        this.websocketsend(JSON.stringify(actions));
			},
			websocketonerror(error){//连接建立失败重连
				console.log('连接建立失败')
				console.log(error)
				// this.initWebSocket();
			},
			websocketonmessage(e){ //数据接收
				console.log(e)
				console.log('数据接收')
				if(e.data != "连接成功"){
					console.log(JSON.parse(e.data))
					const datas = JSON.parse(e.data)
					for(var i = 0 ;i<this.tableData.length;i++){
						if(datas.id == this.tableData[i].id) {
							this.tableData[i].percent = datas.percent 
							this.tableData[i].state = datas.state 
							this.tableData[i].endTime = datas.endTime 
						}
					}
				}
				
				// const redata = JSON.parse(e.data);
			},
			websocketsend(Data){//数据发送
				console.log('数据发送') 
				this.websock.send(Data);
			},
			websocketclose(e){  //关闭
				console.log('断开连接',e);
			},
			// 结果详情函数
			resultDetail(ids) {
				const _self = this
				_self.tableLoadingDetail = true;
				_self.resultDetailDialog = true;
				const params = {
					id: ids
				}
				service.resultDetail(params).then(res => {
					const datas = res.result;

					_self.resultDetailTable = datas;
					
					_self.tableLoadingDetail = false;
				})

			},
			// 级别转换
			formatmodelLevel(row, column) {
				var data = ''
				var array = ['', '低', '中', '高']
				data = array[row.level]
				return data
			},
			// 平台类型转换
			formatPlatformId(row, column) {
				var data = ''
				var array = ['laaS层基础平台','paaS软件集群','SaaS层应用']
				data = array[row.platformId-1]
				return data
			},
			// 弹框表格的状态
			formatmodelStateTwo(row, column) {
				var data = ''
				var array = ['等待执行', '执行中', '完成', '超时', '暂停', '失败']
				data = array[row.state]
				return data
			},
			formatmodelPopoverState(row, column) {
				var data = ''
				var array = ['等待执行', '下发中', '执行中', '完成', '失败', '暂停']
				data = array[row.state]
				return data
			},
			// 状态转换
			formatmodelState(row, column) {
				var data = ''
				var array = ['等待','执行中','完成','暂停','异常']
				data = array[row.state]
				return data
			},
			//复选框
			handleSelectionChange(val){
				this.multipleSelection  = val
			},
			// 状态转换
			formatterLevel(row, column) {
				var data = ''
				var array = ['低','中','高']
				data = array[row.state]
				return data
			},
			//多条删除		
			deleteRowTask() {
				const _self = this
				var ids = [];
				if(this.multipleSelection.length == 0) {
					this.$message({
						message: '请选择需要删除的数据',
						type: 'warning'
					});
				}else{
					this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', {
						confirmButtonText: '确定',
						cancelButtonText: '取消',
						type: 'error'
					}).then(() => {
						_self.multipleSelection.forEach((item,index)=>{
							ids.push(item.id)
						})
						service.deleteRowTask(ids).then(res=>{
							this.$message({
									type: 'success',
									message: res.msg
								})
							_self.queryData()
						}).catch(() => {
							this.$message({
								type: 'info',
								message: res.msg
							})
						})
					}).catch(() => {
						this.$message({
							type: 'info',
							message: '已取消删除'
						})
					})
				}
					
			},
			//删除单条信息
			deleteTask(id) {
				
				this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', {
					confirmButtonText: '确定',
					cancelButtonText: '取消',
					type: 'error'
				}).then(() => {
					const params = {
						id: id
					}
					service.deleteTask(params).then(res => {
						
						this.$message({
							type: 'success',
							message: res.msg
						})
						this.queryData()
					}).catch(() => {
						this.$message({
							type: 'info',
							message: res.msg
						})
					})
				}).catch(() => {
					this.$message({
						type: 'info',
						message: '已取消删除'
					})
				})
			},
			// 单条继续
			continueOne(id) {
				
				this.$confirm('此操作将继续该任务, 是否继续?', '提示', {
					confirmButtonText: '确定',
					cancelButtonText: '取消',
					type: 'success'
				}).then(() => {
					const data = {
						ids: id
					}
					service.continueOne(data).then(res => {
						
						this.$message({
							type: 'success',
							message: '继续成功!'
						})
						this.queryData()
					}).catch(() => {
						this.$message({
							type: 'info',
							message: res.msg
						})
					})
				}).catch(() => {
					this.$message({
						type: 'info',
						message: '已取消删除'
					})
				})
			},
			//多条继续		
			killTaskContinue() {
				var id = [];
				if(this.multipleSelection.length == 0) {
					this.$message({
						message: '请选择需要继续的数据',
						type: 'warning'
					});
				}else {
					this.multipleSelection.forEach((item,index)=>{
						id.push(item.id)
					})
					let params = {
						ids:id.join(',')
					}
					this.$confirm('此操作将继续该记录, 是否继续?', '提示', {
						confirmButtonText: '确定',
						cancelButtonText: '取消',
						type: 'success'
					}).then(() => {
						
					service.killTaskContinue(params).then(res=>{
						this.$message({
								type: 'success',
								message: '继续成功!'
							})
						this.queryData();
					}).catch(() => {
							this.$message({
								type: 'info',
								message: res.msg
							})
						})
					}).catch(() => {
						this.$message({
							type: 'info',
							message: '已取消继续'
						})
					})
				}
				
			},
			
			//多条暂停	
			multipleStopTask() {
				var id = [];
				if(this.multipleSelection.length == 0) {
					this.$message({
						message: '请选择需要暂停的数据',
						type: 'warning'
					});
				}else {
					this.multipleSelection.forEach((item,index)=>{
						id.push(item.id)
					})
					let params = {
						ids:id.join(',')
					}
					this.$confirm('此操作将暂停多条记录, 是否继续?', '提示', {
						confirmButtonText: '确定',
						cancelButtonText: '取消',
						type: 'success'
					}).then(() => {
						
					service.multipleStopTask(params).then(res=>{
						this.$message({
								type: 'success',
								message: '暂停成功!'
							})
						this.queryData();
					}).catch(() => {
							this.$message({
								type: 'info',
								message: res.msg
							})
						})
					}).catch(() => {
						this.$message({
							type: 'info',
							message: '已取消暂停'
						})
					})
				}
				
			},
			
			//暂停条信息
			stopTask(id) {
				this.$confirm('此操作将暂停任务, 是否继续?', '提示', {
					confirmButtonText: '确定',
					cancelButtonText: '取消',
					type: 'error'
				}).then(() => {
					const params = {
						ids: id
					}
					service.stopTask(params).then(res => {
						
						this.$message({
							type: 'success',
							message: '暂停成功!'
						})
						this.queryData()
					}).catch(() => {
						this.$message({
							type: 'info',
							message: res.msg
						})
					})
				}).catch(() => {
					this.$message({
						type: 'info',
						message: '已取消暂停'
					})
				})
			},
			//  ------------------------------------------------
			// 首頁表單查询
			queryDataClick(formName) {
				this.$refs[formName].validate((valid) => {
					if (valid) {
						this.tableLoading = true;
						const params = {
							name:this.formCascader.name,
							creator:this.formCascader.creator,
							start: (this.currentPage - 1) * this.pageSize,
							limit: this.pageSize
						};
						service.queryData(params).then(res => {
							this.tableData = res.result.list;
							this.totalCount = res.result.count;
							this.tableLoading = false;
							
						})
						
					} else {
						console.log('error submit!!');
						return false;
					}
				});
			},
			//表单查询
			queryData() {
				this.tableLoading = true;
				const params = {
					name:this.formCascader.name,
					start: (this.currentPage - 1) * this.pageSize,
					limit: this.pageSize
				};
				service.queryData(params).then(res => {
					this.tableData = res.result.list;
					this.totalCount = res.result.count;
					this.tableLoading = false;
					
				})
			},
			//删除查询信息
			handleDelete(id) {	
				this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', {
					confirmButtonText: '确定',
					cancelButtonText: '取消',
					type: 'error'
				}).then(() => {
					this.$message({
						type: 'success',
						message: '删除成功!'
					})
					const params = {
					  id:id
					}
					service.deleteInfo(params).then(res => {
						console.log(res)
					})
				}).catch(() => {
					this.$message({
						type: 'info',
						message: '已取消删除'
					})
				})
			},
			handleSizeChange(val) { // 设置每页多少条
				this.pageSize = val
				this.queryData()
			},
			handleCurrentChange(val) { // 当前页
				this.currentPage = val
				this.queryData()
			},
			addUser() {
				console.log("add");
			},
			delUser() {
				console.log("del");
			},
			//文件上传
			handleRemove(file, fileList) {
				console.log(file, fileList);
			},
			handlePreview(file) {
				console.log(file);
			},
			handleExceed(files, fileList) {
				this.$message.warning(`当前限制选择 3 个文件，本次选择了 ${files.length} 个文件，共选择了 ${files.length + fileList.length} 个文件`);
			},
			beforeRemove(file, fileList) {
				return this.$confirm(`确定移除 ${ file.name }？`);
			}

		}
	};
</script>


<style scoped lang="scss">
	@import "./index.scss";
</style>


